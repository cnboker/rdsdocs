
# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  IMAGE_NAME: "szsong100/bingo-home"
stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

test-job:       # This job runs in the build stage, which runs first.
  stage: test
  when: manual
  script:
    - echo "test the code.."

build-job:   # This job runs in the test stage.
  stage: build    # It only starts when the job in the build stage completes successfully.
  #when: manual
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
  before_script:
    - echo "before-script.."
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build --platform=linux/arm64 -t $IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  image:
    name: ubuntu:22.04
  variables:
    COMMIT_SHA: "$CI_COMMIT_SHORT_SHA"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo $SSH_PRIVATE_KEY
     ##
    ## Give the right permissions, otherwise ssh-add will refuse to add files
    ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
    ##
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "coobots@gmail.com"
    - git config --global user.name "cnboker"

  script:
    - git clone git@gitlab.com:cnboker/bingo-cloud-kubernetes-scripts.git
    - cd bingo-cloud-kubernetes-scripts
    #- git checkout master
    #- sed -i "s/{{IMAGE_TAG}}/${COMMIT_SHA}/g" bing-cloud-app/deployment/deployment.yaml
    # replace image: szsong100/bingo-app:93bb2967 to image: szsong100/bingo-app:${COMMIT_SHA}
    - sed -i "s/$IMAGE_NAME:.*$/$IMAGE_NAME:${COMMIT_SHA}/g" bing-cloud-home/deployment/deployment.yaml     
    - git add bing-cloud-home/deployment/deployment.yaml
    - git commit -m "Update deployment image to version ${COMMIT_SHA}"
    - git push --force git@gitlab.com:cnboker/bingo-cloud-kubernetes-scripts HEAD:main

